diff --git a/MdeModulePkg/Core/Dxe/DxeMain.h b/MdeModulePkg/Core/Dxe/DxeMain.h
index 815a6b4..9f0e60a 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain.h
+++ b/MdeModulePkg/Core/Dxe/DxeMain.h
@@ -85,6 +85,9 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include <Library/DebugAgentLib.h>
 #include <Library/CpuExceptionHandlerLib.h>
 
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 //
 // attributes for reserved memory before it is promoted to system memory
 //
diff --git a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
index 4683016..896b631 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
+++ b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
@@ -244,6 +244,13 @@ DxeMain (
   EFI_VECTOR_HANDOFF_INFO       *VectorInfo;
   VOID                          *EntryPoint;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   //
   // Setup the default exception handlers
   //
@@ -569,6 +576,15 @@ DxeMain (
     (EFI_SOFTWARE_DXE_CORE | EFI_SW_DXE_CORE_PC_HANDOFF_TO_NEXT)
     );
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   //
   // Transfer control to the BDS Architectural Protocol
   //
diff --git a/MdeModulePkg/Core/DxeIplPeim/DxeIpl.h b/MdeModulePkg/Core/DxeIplPeim/DxeIpl.h
index 2f015be..4e6255c 100644
--- a/MdeModulePkg/Core/DxeIplPeim/DxeIpl.h
+++ b/MdeModulePkg/Core/DxeIplPeim/DxeIpl.h
@@ -43,6 +43,9 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include <Library/PeiServicesTablePointerLib.h>
 #include <Library/PerformanceLib.h>
 
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 #define STACK_SIZE      0x20000
 #define BSP_STORE_SIZE  0x4000
 
diff --git a/MdeModulePkg/Core/DxeIplPeim/DxeIpl.inf b/MdeModulePkg/Core/DxeIplPeim/DxeIpl.inf
index 052ea0e..ad481d2 100644
--- a/MdeModulePkg/Core/DxeIplPeim/DxeIpl.inf
+++ b/MdeModulePkg/Core/DxeIplPeim/DxeIpl.inf
@@ -79,6 +79,7 @@
   DebugAgentLib
   PeiServicesTablePointerLib
   PerformanceLib
+  TimerLib
 
 [LibraryClasses.ARM, LibraryClasses.AARCH64]
   ArmMmuLib
diff --git a/MdeModulePkg/Core/DxeIplPeim/DxeLoad.c b/MdeModulePkg/Core/DxeIplPeim/DxeLoad.c
index 2c19f1a..c2aa857 100644
--- a/MdeModulePkg/Core/DxeIplPeim/DxeLoad.c
+++ b/MdeModulePkg/Core/DxeIplPeim/DxeLoad.c
@@ -268,6 +268,14 @@ DxeLoadCore (
   EFI_MEMORY_TYPE_INFORMATION      MemoryData[EfiMaxMemoryType + 1];
   VOID                             *CapsuleOnDiskModePpi;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
+
   //
   // if in S3 Resume, restore configure
   //
@@ -443,6 +451,15 @@ DxeLoadCore (
 
   DEBUG ((DEBUG_INFO | DEBUG_LOAD, "Loading DXE CORE at 0x%11p EntryPoint=0x%11p\n", (VOID *)(UINTN)DxeCoreAddress, FUNCTION_ENTRY_POINT (DxeCoreEntryPoint)));
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   //
   // Transfer control to the DXE Core
   // The hand off state is simply a pointer to the HOB list
diff --git a/MdeModulePkg/Core/Pei/PeiMain.h b/MdeModulePkg/Core/Pei/PeiMain.h
index 556bedd..a6ce2fe 100644
--- a/MdeModulePkg/Core/Pei/PeiMain.h
+++ b/MdeModulePkg/Core/Pei/PeiMain.h
@@ -46,6 +46,10 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include <Guid/AprioriFileName.h>
 #include <Guid/MigratedFvInfo.h>
 
+#include <Library/DebugLib.h>
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 ///
 /// It is an FFS type extension used for PeiFindFileEx. It indicates current
 /// FFS searching is for all PEIMs can be dispatched by PeiCore.
diff --git a/MdeModulePkg/Core/Pei/PeiMain.inf b/MdeModulePkg/Core/Pei/PeiMain.inf
index 0cf3573..d4adacf 100644
--- a/MdeModulePkg/Core/Pei/PeiMain.inf
+++ b/MdeModulePkg/Core/Pei/PeiMain.inf
@@ -66,6 +66,7 @@
   PeCoffLib
   PeiServicesTablePointerLib
   PcdLib
+  TimerLib
 
 [Guids]
   gPeiAprioriFileNameGuid       ## SOMETIMES_CONSUMES   ## File
diff --git a/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c b/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
index bf1719d..b388c4b 100644
--- a/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
+++ b/MdeModulePkg/Core/Pei/PeiMain/PeiMain.c
@@ -179,6 +179,23 @@ PeiCore (
   EFI_PEI_TEMPORARY_RAM_DONE_PPI  *TemporaryRamDonePpi;
   UINTN                           Index;
 
+  UINT64 Frequency = GetPerformanceCounterProperties (NULL, NULL);
+  UINT64 StartTicks = GetPerformanceCounter();
+  //
+  // CSG: also log the ticks, as we are at the very begining
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: G3N3S1S (ticks): %" PRIu64 " Freq: %" PRIu64 "\n",
+    __FUNCTION__,
+    StartTicks,
+    Frequency
+  ));
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   //
   // Retrieve context passed into PEI Core
   //
@@ -522,6 +539,15 @@ PeiCore (
     CpuDeadLoop ();
   }
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   //
   // Enter DxeIpl to load Dxe core.
   //
diff --git a/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf b/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
index 5bac635..6a1aead 100644
--- a/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
+++ b/MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
@@ -54,6 +54,7 @@
   PlatformBootManagerLib
   PcdLib
   PrintLib
+  TimerLib
 
 [Guids]
   gEfiGlobalVariableGuid                        ## SOMETIMES_PRODUCES ## Variable:L"BootNext" (The number of next boot option)
diff --git a/MdeModulePkg/Universal/BdsDxe/BdsEntry.c b/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
index 766dde3..00401d3 100644
--- a/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
+++ b/MdeModulePkg/Universal/BdsDxe/BdsEntry.c
@@ -17,6 +17,9 @@ SPDX-License-Identifier: BSD-2-Clause-Patent
 #include "HwErrRecSupport.h"
 #include <Library/VariablePolicyHelperLib.h>
 
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 #define SET_BOOT_OPTION_SUPPORT_KEY_COUNT(a, c)  { \
       (a) = ((a) & ~EFI_BOOT_OPTION_SUPPORT_COUNT) | (((c) << LowBitSet32 (EFI_BOOT_OPTION_SUPPORT_COUNT)) & EFI_BOOT_OPTION_SUPPORT_COUNT); \
       }
@@ -696,6 +699,13 @@ BdsEntry (
   Status          = EFI_SUCCESS;
   BootSuccess     = FALSE;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   //
   // Insert the performance probe
   //
@@ -915,6 +925,15 @@ BdsEntry (
 
   PERF_INMODULE_END ("EfiBootManagerConnectAllDefaultConsoles");
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   //
   // Do the platform specific action after the console is ready
   // Possible things that can be done in PlatformBootManagerAfterConsole:
diff --git a/MdePkg/Include/Library/DebugLib.h b/MdePkg/Include/Library/DebugLib.h
index 9110be2..000dbd7 100644
--- a/MdePkg/Include/Library/DebugLib.h
+++ b/MdePkg/Include/Library/DebugLib.h
@@ -416,16 +416,21 @@ UnitTestDebugAssert (
 
 
 **/
-#if !defined (MDEPKG_NDEBUG)
+//
+// CSG: get the DEBUG (INFO) logs even if building the RELEASE target.
+// Empirically, this introduces around 0.5 s extra to the start-up
+// time
+//
+// #if !defined (MDEPKG_NDEBUG)
 #define DEBUG(Expression)        \
     do {                           \
       if (DebugPrintEnabled ()) {  \
         _DEBUG (Expression);       \
       }                            \
     } while (FALSE)
-#else
-#define DEBUG(Expression)
-#endif
+// #else
+// #define DEBUG(Expression)
+// #endif
 
 /**
   Macro that calls DebugAssert() if an EFI_STATUS evaluates to an error code.
diff --git a/OvmfPkg/AmdSev/BlobVerifierLibSevHashes/BlobVerifierSevHashes.c b/OvmfPkg/AmdSev/BlobVerifierLibSevHashes/BlobVerifierSevHashes.c
index 65f040f..12e0179 100644
--- a/OvmfPkg/AmdSev/BlobVerifierLibSevHashes/BlobVerifierSevHashes.c
+++ b/OvmfPkg/AmdSev/BlobVerifierLibSevHashes/BlobVerifierSevHashes.c
@@ -13,6 +13,8 @@
 #include <Library/BaseMemoryLib.h>
 #include <Library/DebugLib.h>
 #include <Library/BlobVerifierLib.h>
+#include <Library/TimerLib.h>
+#include <inttypes.h>
 
 /**
   The SEV Hashes table must be in encrypted memory and has the table
@@ -97,6 +99,13 @@ VerifyBlob (
   INT32       Remaining;
   HASH_TABLE  *Entry;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   if ((mHashesTable == NULL) || (mHashesTableSize == 0)) {
     DEBUG ((
       DEBUG_ERROR,
@@ -172,6 +181,16 @@ VerifyBlob (
         ));
     }
 
+    UINT64 EndTicks = GetPerformanceCounter();
+    UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+    DEBUG ((
+      DEBUG_INFO,
+      "%a: CSG-M4G1C: Blob: %s Duration (ns): %" PRIu64 "\n",
+      __FUNCTION__,
+      BlobName,
+      DurationNs
+    ));
+
     return Status;
   }
 
diff --git a/OvmfPkg/Library/PlatformBootManagerLibGrub/BdsPlatform.c b/OvmfPkg/Library/PlatformBootManagerLibGrub/BdsPlatform.c
index a402589..b0d4f0c 100644
--- a/OvmfPkg/Library/PlatformBootManagerLibGrub/BdsPlatform.c
+++ b/OvmfPkg/Library/PlatformBootManagerLibGrub/BdsPlatform.c
@@ -13,6 +13,9 @@
 #include <Library/PlatformBmPrintScLib.h>
 #include <Library/Tcg2PhysicalPresenceLib.h>
 
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 //
 // Global data
 //
@@ -1399,6 +1402,13 @@ PlatformBootManagerAfterConsole (
 {
   EFI_BOOT_MODE  BootMode;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   DEBUG ((DEBUG_INFO, "PlatformBootManagerAfterConsole\n"));
 
   //
@@ -1423,6 +1433,15 @@ PlatformBootManagerAfterConsole (
   //
   PciAcpiInitialization ();
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   //
   // Process QEMU's -kernel command line option
   //
diff --git a/OvmfPkg/Library/PlatformBootManagerLibGrub/QemuKernel.c b/OvmfPkg/Library/PlatformBootManagerLibGrub/QemuKernel.c
index 1e66e3c..2483448 100644
--- a/OvmfPkg/Library/PlatformBootManagerLibGrub/QemuKernel.c
+++ b/OvmfPkg/Library/PlatformBootManagerLibGrub/QemuKernel.c
@@ -13,6 +13,9 @@
 #include <Library/ReportStatusCodeLib.h>
 #include <Library/UefiLib.h>
 
+#include <Library/TimerLib.h>
+#include <inttypes.h>
+
 EFI_STATUS
 TryRunningQemuKernel (
   VOID
@@ -21,6 +24,13 @@ TryRunningQemuKernel (
   EFI_STATUS  Status;
   EFI_HANDLE  KernelImageHandle;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   Status = QemuLoadKernelImage (&KernelImageHandle);
   if (EFI_ERROR (Status)) {
     return Status;
@@ -36,6 +46,23 @@ TryRunningQemuKernel (
     (EFI_SOFTWARE_DXE_BS_DRIVER | EFI_SW_DXE_BS_PC_READY_TO_BOOT_EVENT)
     );
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+  UINT64 Frequency = GetPerformanceCounterProperties (NULL, NULL);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: 3ND (ticks): %" PRIu64 " Freq: %" PRIu64 "\n",
+    __FUNCTION__,
+    EndTicks,
+    Frequency
+  ));
+
   //
   // Start the image.
   //
@@ -49,6 +76,15 @@ TryRunningQemuKernel (
       ));
   }
 
+  //
+  // CSG: CoCo boots directly from the initrd, so we never return from the StartKernel call
+  //
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: NOT HERE\n",
+    __FUNCTION__
+  ));
+
   QemuUnloadKernelImage (KernelImageHandle);
 
   return Status;
diff --git a/OvmfPkg/QemuKernelLoaderFsDxe/QemuKernelLoaderFsDxe.c b/OvmfPkg/QemuKernelLoaderFsDxe/QemuKernelLoaderFsDxe.c
index d4f3cd9..c888a99 100644
--- a/OvmfPkg/QemuKernelLoaderFsDxe/QemuKernelLoaderFsDxe.c
+++ b/OvmfPkg/QemuKernelLoaderFsDxe/QemuKernelLoaderFsDxe.c
@@ -22,12 +22,15 @@
 #include <Library/DevicePathLib.h>
 #include <Library/MemoryAllocationLib.h>
 #include <Library/QemuFwCfgLib.h>
+#include <Library/TimerLib.h>
 #include <Library/UefiBootServicesTableLib.h>
 #include <Library/UefiRuntimeServicesTableLib.h>
 #include <Protocol/DevicePath.h>
 #include <Protocol/LoadFile2.h>
 #include <Protocol/SimpleFileSystem.h>
 
+#include <inttypes.h>
+
 //
 // Static data that hosts the fw_cfg blobs and serves file requests.
 //
@@ -1045,6 +1048,13 @@ QemuKernelLoaderFsDxeEntrypoint (
   EFI_HANDLE   FileSystemHandle;
   EFI_HANDLE   InitrdLoadFile2Handle;
 
+  UINT64 StartTicks = GetPerformanceCounter();
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: BEGIN\n",
+    __FUNCTION__
+  ));
+
   if (!QemuFwCfgIsAvailable ()) {
     return EFI_NOT_FOUND;
   }
@@ -1128,6 +1138,15 @@ QemuKernelLoaderFsDxeEntrypoint (
     }
   }
 
+  UINT64 EndTicks = GetPerformanceCounter();
+  UINT64 DurationNs = GetTimeInNanoSecond(EndTicks - StartTicks);
+  DEBUG ((
+    DEBUG_INFO,
+    "%a: CSG-M4G1C: Duration (ns): %" PRIu64 "\n",
+    __FUNCTION__,
+    DurationNs
+  ));
+
   return EFI_SUCCESS;
 
 UninstallFileSystemHandle:
