name: "Integration tests"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  python-format:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      # Formatting checks
      - name: "Code formatting check"
        run: ./bin/inv_wrapper.sh format-code

  setup-cluster:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted
    env:
      KUBECONFIG: .config/kubeadm_kubeconfig
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Build and install containerd"
        run: ./bin/inv_wrapper.sh containerd.build containerd.install --clean
      - name: "Build and install nydus"
        run: ./bin/inv_wrapper.sh nydus.build nydus.install --clean
      - name: "Install k8s tooling"
        run: ./bin/inv_wrapper.sh k8s.install --clean
      - name: "Install single-node k8s cluster"
        run: |
          sudo swapoff -a
          ./bin/inv_wrapper.sh kubeadm.create
          kubectl get nodes
      - name: "Install CoCo using operator"
        run: ./bin/inv_wrapper.sh operator.install operator.install-cc-runtime
      - name: "Run python hello world"
        run: |
          ./bin/kubectl apply -f ./apps/helloworld-py
          service_ip=$(./bin/kubectl get services -o jsonpath='{.items[?(@.metadata.name=="coco-helloworld-py-node-port")].spec.clusterIP}')
          [ "$(curl -X GET ${service_ip}:8080)" = "Hello World!" ]
          ./bin/kubectl delete -f ./apps/helloworld-py
      - name: "Clean-up"
        if: always()
        run: ./bin/inv_wrapper.sh kubeadm.destroy
