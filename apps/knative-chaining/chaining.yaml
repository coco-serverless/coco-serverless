apiVersion: v1
kind: Namespace
metadata:
  name: chaining-test
---
# We need to have as many channels as edges in our workflow DAG. Alternatively,
# we could enforce edges by using a Broker/Trigger pattern and filtering on
# CloudEvent properties
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: ingress-to-one
  namespace: chaining-test
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
---
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: one-to-two
  namespace: chaining-test
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
---
# We can re-use the same service for all our steps in the chain. Depending on
# the CloudEvent metadata the service will do one thing or another. In
# addition, the channel and subscription structure enforces the right routing
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: coco-knative-chaining
  namespace: chaining-test
spec:
  template:
    spec:
      runtimeClassName: kata-qemu
      # runtimeClassName: kata-qemu-sev
      securityContext:
        runAsUser: 1000
      containers:
        - image: ghcr.io/coco-serverless/coco-knative-chaining:unencrypted
          ports:
            - containerPort: 8080
    # Set a hard auto-scaling limit to scale-up for every new CloudEvent.
    # Equivalently, each service processes at most one concurrent request
    metadata:
      annotations:
        autoscaling.knative.dev/target: "1"
        # NOTE: we may have to enable this annotation in Kata's config file
        # under hypervisor.qemu.enable_annotations (add 'default_memory')
        io.katacontainers.config.hypervisor.default_memory: "4096"
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-one-subscription
  namespace: chaining-test
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: ingress-to-one
  reply:
    ref:
      apiVersion: messaging.knative.dev/v1
      kind: InMemoryChannel
      name: one-to-two
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: coco-knative-chaining
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-two-subscription
  namespace: chaining-test
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: one-to-two
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: coco-knative-chaining
